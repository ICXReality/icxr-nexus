/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NewsIndexRouteImport } from './routes/news/index'
import { Route as EventsIndexRouteImport } from './routes/events/index'
import { Route as ClubsIndexRouteImport } from './routes/clubs/index'
import { Route as ClubsApplyIndexRouteImport } from './routes/clubs/apply/index'
import { Route as ClubsIdIndexRouteImport } from './routes/clubs/$id/index'
import { Route as ClubsIdEditRouteImport } from './routes/clubs/$id/edit'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NewsIndexRoute = NewsIndexRouteImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClubsIndexRoute = ClubsIndexRouteImport.update({
  id: '/clubs/',
  path: '/clubs/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClubsApplyIndexRoute = ClubsApplyIndexRouteImport.update({
  id: '/clubs/apply/',
  path: '/clubs/apply/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClubsIdIndexRoute = ClubsIdIndexRouteImport.update({
  id: '/clubs/$id/',
  path: '/clubs/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ClubsIdEditRoute = ClubsIdEditRouteImport.update({
  id: '/clubs/$id/edit',
  path: '/clubs/$id/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/clubs': typeof ClubsIndexRoute
  '/events': typeof EventsIndexRoute
  '/news': typeof NewsIndexRoute
  '/clubs/$id/edit': typeof ClubsIdEditRoute
  '/clubs/$id': typeof ClubsIdIndexRoute
  '/clubs/apply': typeof ClubsApplyIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/clubs': typeof ClubsIndexRoute
  '/events': typeof EventsIndexRoute
  '/news': typeof NewsIndexRoute
  '/clubs/$id/edit': typeof ClubsIdEditRoute
  '/clubs/$id': typeof ClubsIdIndexRoute
  '/clubs/apply': typeof ClubsApplyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/clubs/': typeof ClubsIndexRoute
  '/events/': typeof EventsIndexRoute
  '/news/': typeof NewsIndexRoute
  '/clubs/$id/edit': typeof ClubsIdEditRoute
  '/clubs/$id/': typeof ClubsIdIndexRoute
  '/clubs/apply/': typeof ClubsApplyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/clubs'
    | '/events'
    | '/news'
    | '/clubs/$id/edit'
    | '/clubs/$id'
    | '/clubs/apply'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/clubs'
    | '/events'
    | '/news'
    | '/clubs/$id/edit'
    | '/clubs/$id'
    | '/clubs/apply'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/clubs/'
    | '/events/'
    | '/news/'
    | '/clubs/$id/edit'
    | '/clubs/$id/'
    | '/clubs/apply/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  ClubsIndexRoute: typeof ClubsIndexRoute
  EventsIndexRoute: typeof EventsIndexRoute
  NewsIndexRoute: typeof NewsIndexRoute
  ClubsIdEditRoute: typeof ClubsIdEditRoute
  ClubsIdIndexRoute: typeof ClubsIdIndexRoute
  ClubsApplyIndexRoute: typeof ClubsApplyIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/news/': {
      id: '/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof NewsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clubs/': {
      id: '/clubs/'
      path: '/clubs'
      fullPath: '/clubs'
      preLoaderRoute: typeof ClubsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clubs/apply/': {
      id: '/clubs/apply/'
      path: '/clubs/apply'
      fullPath: '/clubs/apply'
      preLoaderRoute: typeof ClubsApplyIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clubs/$id/': {
      id: '/clubs/$id/'
      path: '/clubs/$id'
      fullPath: '/clubs/$id'
      preLoaderRoute: typeof ClubsIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clubs/$id/edit': {
      id: '/clubs/$id/edit'
      path: '/clubs/$id/edit'
      fullPath: '/clubs/$id/edit'
      preLoaderRoute: typeof ClubsIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  ClubsIndexRoute: ClubsIndexRoute,
  EventsIndexRoute: EventsIndexRoute,
  NewsIndexRoute: NewsIndexRoute,
  ClubsIdEditRoute: ClubsIdEditRoute,
  ClubsIdIndexRoute: ClubsIdIndexRoute,
  ClubsApplyIndexRoute: ClubsApplyIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
